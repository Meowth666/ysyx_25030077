[0m[[0m[0minfo[0m] [0m[0mcompiling 317 Scala sources to /home/meowth/ysyx/ysyx-workbench/ysyxSoC/out/rocketchip/compile.dest/classes ...[0m
[0m[[0m[33mwarn[0m] [0m[0m/home/meowth/ysyx/ysyx-workbench/ysyxSoC/rocket-chip/src/main/scala/diplomacy/Parameters.scala:122:16: Implicit definition should have explicit type (inferred Boolean) [quickfixable][0m
[0m[[0m[33mwarn[0m] [0m[0m  implicit def asBool(x: TransferSizes) = !x.none[0m
[0m[[0m[33mwarn[0m] [0m[0m               ^[0m
[0m[[0m[33mwarn[0m] [0m[0m/home/meowth/ysyx/ysyx-workbench/ysyxSoC/rocket-chip/src/main/scala/diplomacy/package.scala:62:16: Implicit definition should have explicit type (inferred org.chipsalliance.diplomacy.SourcecodeNameExt) [quickfixable][0m
[0m[[0m[33mwarn[0m] [0m[0m  implicit def SourcecodeNameExt(x: sourcecode.Name) = _root_.org.chipsalliance.diplomacy.SourcecodeNameExt(x)[0m
[0m[[0m[33mwarn[0m] [0m[0m               ^[0m
[0m[[0m[33mwarn[0m] [0m[0m/home/meowth/ysyx/ysyx-workbench/ysyxSoC/rocket-chip/src/main/scala/jtag/JtagStateMachine.scala:18:18: Implicit definition should have explicit type (inferred Int) [quickfixable][0m
[0m[[0m[33mwarn[0m] [0m[0m    implicit def toInt(x: State) = x.id[0m
[0m[[0m[33mwarn[0m] [0m[0m                 ^[0m
[0m[[0m[33mwarn[0m] [0m[0m/home/meowth/ysyx/ysyx-workbench/ysyxSoC/rocket-chip/src/main/scala/jtag/package.scala:14:16: Implicit definition should have explicit type (inferred (scala.math.BigInt, V)) [quickfixable][0m
[0m[[0m[33mwarn[0m] [0m[0m  implicit def instructionIntKeyToBigInt[V <: Chain](x: (Int, V)) = (BigInt(x._1), x._2)[0m
[0m[[0m[33mwarn[0m] [0m[0m               ^[0m
[0m[[0m[33mwarn[0m] [0m[0m/home/meowth/ysyx/ysyx-workbench/ysyxSoC/rocket-chip/src/main/scala/regmapper/RegField.scala:21:16: Implicit definition should have explicit type (inferred freechips.rocketchip.regmapper.RegReadFn) [quickfixable][0m
[0m[[0m[33mwarn[0m] [0m[0m  implicit def apply(x: (Bool, Bool) => (Bool, Bool, UInt)) =[0m
[0m[[0m[33mwarn[0m] [0m[0m               ^[0m
[0m[[0m[33mwarn[0m] [0m[0m/home/meowth/ysyx/ysyx-workbench/ysyxSoC/rocket-chip/src/main/scala/regmapper/RegField.scala:32:16: Implicit definition should have explicit type (inferred freechips.rocketchip.regmapper.RegReadFn) [quickfixable][0m
[0m[[0m[33mwarn[0m] [0m[0m  implicit def apply(x: Bool => (Bool, UInt)) =[0m
[0m[[0m[33mwarn[0m] [0m[0m               ^[0m
[0m[[0m[33mwarn[0m] [0m[0m/home/meowth/ysyx/ysyx-workbench/ysyxSoC/rocket-chip/src/main/scala/regmapper/RegField.scala:53:16: Implicit definition should have explicit type (inferred freechips.rocketchip.regmapper.RegWriteFn) [quickfixable][0m
[0m[[0m[33mwarn[0m] [0m[0m  implicit def apply(x: (Bool, Bool, UInt) => (Bool, Bool)) =[0m
[0m[[0m[33mwarn[0m] [0m[0m               ^[0m
[0m[[0m[33mwarn[0m] [0m[0m/home/meowth/ysyx/ysyx-workbench/ysyxSoC/rocket-chip/src/main/scala/regmapper/RegField.scala:65:16: Implicit definition should have explicit type (inferred freechips.rocketchip.regmapper.RegWriteFn) [quickfixable][0m
[0m[[0m[33mwarn[0m] [0m[0m  implicit def apply(x: (Bool, UInt) => Bool) =[0m
[0m[[0m[33mwarn[0m] [0m[0m               ^[0m
[0m[[0m[33mwarn[0m] [0m[0m/home/meowth/ysyx/ysyx-workbench/ysyxSoC/rocket-chip/src/main/scala/util/PlusArg.scala:35:16: Implicit definition should have explicit type (inferred freechips.rocketchip.util.Doctypeable[Int]) [quickfixable][0m
[0m[[0m[33mwarn[0m] [0m[0m  implicit val intToDoctype    = new Doctypeable[Int]    { def toDoctype(a: Option[Int])    = "INT"    }[0m
[0m[[0m[33mwarn[0m] [0m[0m               ^[0m
[0m[[0m[33mwarn[0m] [0m[0m/home/meowth/ysyx/ysyx-workbench/ysyxSoC/rocket-chip/src/main/scala/util/PlusArg.scala:38:16: Implicit definition should have explicit type (inferred freechips.rocketchip.util.Doctypeable[BigInt]) [quickfixable][0m
[0m[[0m[33mwarn[0m] [0m[0m  implicit val bigIntToDoctype = new Doctypeable[BigInt] { def toDoctype(a: Option[BigInt]) = "INT"    }[0m
[0m[[0m[33mwarn[0m] [0m[0m               ^[0m
[0m[[0m[33mwarn[0m] [0m[0m/home/meowth/ysyx/ysyx-workbench/ysyxSoC/rocket-chip/src/main/scala/util/PlusArg.scala:41:16: Implicit definition should have explicit type (inferred freechips.rocketchip.util.Doctypeable[String]) [quickfixable][0m
[0m[[0m[33mwarn[0m] [0m[0m  implicit val stringToDoctype = new Doctypeable[String] { def toDoctype(a: Option[String]) = "STRING" }[0m
[0m[[0m[33mwarn[0m] [0m[0m               ^[0m
[0m[[0m[33mwarn[0m] [0m[0m/home/meowth/ysyx/ysyx-workbench/ysyxSoC/rocket-chip/src/main/scala/util/ShiftQueue.scala:18:28: reference to entries is ambiguous;[0m
[0m[[0m[33mwarn[0m] [0m[0mit is both defined in the enclosing class ShiftQueue and inherited in the enclosing anonymous class as value entries (defined in class QueueIO)[0m
[0m[[0m[33mwarn[0m] [0m[0mIn Scala 2, symbols inherited from a superclass shadow symbols defined in an outer scope.[0m
[0m[[0m[33mwarn[0m] [0m[0mSuch references are ambiguous in Scala 3. To continue using the inherited symbol, write `this.entries`.[0m
[0m[[0m[33mwarn[0m] [0m[0mOr use `-Wconf:msg=legacy-binding:s` to silence this warning. [quickfixable][0m
[0m[[0m[33mwarn[0m] [0m[0m    val mask = Output(UInt(entries.W))[0m
[0m[[0m[33mwarn[0m] [0m[0m                           ^[0m
[0m[[0m[33mwarn[0m] [0m[0m7 deprecations[0m
[0m[[0m[33mwarn[0m] [0m[0m78 deprecations (since 2.13.0)[0m
[0m[[0m[33mwarn[0m] [0m[0m1 deprecation (since 2.13.7)[0m
[0m[[0m[33mwarn[0m] [0m[0m1 deprecation (since 9)[0m
[0m[[0m[33mwarn[0m] [0m[0m27 deprecations (since CDE 0.1)[0m
[0m[[0m[33mwarn[0m] [0m[0m10 deprecations (since diplomacy 1.0.0)[0m
[0m[[0m[33mwarn[0m] [0m[0m1 deprecation (since rocket-chip 1.2)[0m
[0m[[0m[33mwarn[0m] [0m[0m36 deprecations (since rocketchip 2.0.0)[0m
[0m[[0m[33mwarn[0m] [0m[0m161 deprecations in total; re-run with -deprecation for details[0m
[0m[[0m[33mwarn[0m] [0m[0m20 feature warnings; re-run with -feature for details[0m
[0m[[0m[33mwarn[0m] [0m[0m22 warnings found[0m
[0m[[0m[0minfo[0m] [0m[0mdone compiling[0m
