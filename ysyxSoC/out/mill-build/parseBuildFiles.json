{
    "value": {
        "seenScripts": [
            [
                "/home/meowth/ysyx/ysyx-workbench/ysyxSoC/rocket-chip/dependencies/diplomacy/common.sc",
                "import mill._\nimport mill.scalalib._\n\ntrait HasChisel extends ScalaModule {\n  // Define these for building chisel from source\n  def chiselModule: Option[ScalaModule]\n  override def moduleDeps = super.moduleDeps ++ chiselModule\n\n  def chiselPluginJar: T[Option[PathRef]]\n  override def scalacOptions = T(\n    (super.scalacOptions() ++ chiselPluginJar().map(path => s\"-Xplugin:${path.path}\")) ++ Seq(\"-deprecation\", \"-feature\")\n  )\n  override def scalacPluginClasspath: T[Agg[PathRef]] = T(super.scalacPluginClasspath() ++ chiselPluginJar())\n\n  // Define these for using chisel from ivy\n  def chiselIvy: Option[Dep]\n  override def ivyDeps = T(super.ivyDeps() ++ chiselIvy)\n\n  def chiselPluginIvy: Option[Dep]\n  override def scalacPluginIvyDeps: T[Agg[Dep]] = T(\n    super.scalacPluginIvyDeps() ++ chiselPluginIvy.map(Agg(_)).getOrElse(Agg.empty[Dep])\n  )\n}\n\ntrait DiplomacyModule extends HasChisel {\n\n  def cdeModule: ScalaModule\n\n  override def moduleDeps = super.moduleDeps ++ Some(cdeModule)\n\n  def sourcecodeIvy: Dep\n\n  override def ivyDeps = T(super.ivyDeps() ++ Some(sourcecodeIvy))\n\n  override def scalacOptions = T(\n    super.scalacOptions() ++ Seq(\"-Wunused\")\n  )\n\n}\n"
            ],
            [
                "/home/meowth/ysyx/ysyx-workbench/ysyxSoC/rocket-chip/dependencies/cde/common.sc",
                "import mill._\nimport scalalib._\n\ntrait CDEModule\n  extends ScalaModule\n\ntrait CDETestModule\n  extends TestModule\n    with ScalaModule\n    with TestModule.Utest {\n\n  def cdeModule: CDEModule\n\n  def utestIvy: Dep\n\n  override def moduleDeps = super.moduleDeps ++ Some(cdeModule)\n\n  override def ivyDeps = T(\n    super.ivyDeps() ++ Agg(\n      utestIvy\n    )\n  )\n\n  override def defaultCommandName() = \"test\"\n}\n"
            ],
            [
                "/home/meowth/ysyx/ysyx-workbench/ysyxSoC/rocket-chip/dependencies/hardfloat/common.sc",
                "import mill._\nimport mill.scalalib._\n\ntrait HasChisel\n  extends ScalaModule {\n  // Define these for building chisel from source\n  def chiselModule: Option[ScalaModule]\n\n  override def moduleDeps = super.moduleDeps ++ chiselModule\n\n  def chiselPluginJar: T[Option[PathRef]]\n\n  override def scalacOptions = T(super.scalacOptions() ++ chiselPluginJar().map(path => s\"-Xplugin:${path.path}\"))\n\n  override def scalacPluginClasspath: T[Agg[PathRef]] = T(super.scalacPluginClasspath() ++ chiselPluginJar())\n\n  // Define these for building chisel from ivy\n  def chiselIvy: Option[Dep]\n\n  override def ivyDeps = T(super.ivyDeps() ++ chiselIvy)\n\n  def chiselPluginIvy: Option[Dep]\n\n  override def scalacPluginIvyDeps: T[Agg[Dep]] = T(super.scalacPluginIvyDeps() ++ chiselPluginIvy.map(Agg(_)).getOrElse(Agg.empty[Dep]))\n}\n\ntrait HardfloatModule\n  extends HasChisel\n\ntrait HardfloatTestModule\n  extends TestModule\n    with HasChisel\n    with TestModule.ScalaTest {\n\n  def hardfloatModule: HardfloatModule\n\n  def chiselModule = hardfloatModule.chiselModule\n\n  def chiselPluginJar: T[Option[PathRef]] = T(hardfloatModule.chiselPluginJar())\n\n  def chiselIvy: Option[Dep] = hardfloatModule.chiselIvy\n\n  def chiselPluginIvy: Option[Dep] = hardfloatModule.chiselPluginIvy\n\n  def scalatestIvy: Dep\n\n  def scalaparIvy: Dep\n\n  override def moduleDeps = super.moduleDeps ++ Some(hardfloatModule)\n\n  override def defaultCommandName() = \"test\"\n\n  override def ivyDeps = T(\n    super.ivyDeps() ++ Agg(\n      scalatestIvy,\n      scalaparIvy\n    )\n  )\n}"
            ],
            [
                "/home/meowth/ysyx/ysyx-workbench/ysyxSoC/rocket-chip/common.sc",
                "import mill._\nimport mill.scalalib._\n\ntrait HasChisel\n  extends ScalaModule {\n  // Define these for building chisel from source\n  def chiselModule: Option[ScalaModule]\n\n  override def moduleDeps = super.moduleDeps ++ chiselModule\n\n  def chiselPluginJar: T[Option[PathRef]]\n\n  override def scalacOptions = T(super.scalacOptions() ++ chiselPluginJar().map(path => s\"-Xplugin:${path.path}\"))\n\n  override def scalacPluginClasspath: T[Agg[PathRef]] = T(super.scalacPluginClasspath() ++ chiselPluginJar())\n\n  // Define these for building chisel from ivy\n  def chiselIvy: Option[Dep]\n\n  override def ivyDeps = T(super.ivyDeps() ++ chiselIvy)\n\n  def chiselPluginIvy: Option[Dep]\n\n  override def scalacPluginIvyDeps: T[Agg[Dep]] = T(super.scalacPluginIvyDeps() ++ chiselPluginIvy.map(Agg(_)).getOrElse(Agg.empty[Dep]))\n}\n\ntrait MacrosModule\n  extends ScalaModule {\n\n  def scalaReflectIvy: Dep\n\n  override def ivyDeps = T(super.ivyDeps() ++ Some(scalaReflectIvy))\n}\n\n\ntrait RocketChipModule\n  extends HasChisel {\n  override def mainClass = T(Some(\"freechips.rocketchip.diplomacy.Main\"))\n\n  def macrosModule: MacrosModule\n\n  // should be hardfloat/common.sc#HardfloatModule\n  def hardfloatModule: ScalaModule\n\n  def diplomacyModule: ScalaModule\n\n  def mainargsIvy: Dep\n\n  def json4sJacksonIvy: Dep\n\n  override def moduleDeps = super.moduleDeps ++ Seq(macrosModule, hardfloatModule, diplomacyModule)\n\n  override def ivyDeps = T(\n    super.ivyDeps() ++ Agg(\n      mainargsIvy,\n      json4sJacksonIvy,\n    )\n  )\n}\n"
            ],
            [
                "/home/meowth/ysyx/ysyx-workbench/ysyxSoC/build.sc",
                "import mill._\nimport scalalib._\nimport build_.`rocket-chip`.dependencies.hardfloat.{common => hardfloatCommon}\nimport build_.`rocket-chip`.dependencies.cde.{common => cdeCommon}\nimport build_.`rocket-chip`.dependencies.diplomacy.{common => diplomacyCommon}\nimport build_.`rocket-chip`.{common => rocketChipCommon}\n\nval chiselVersion = \"7.0.0-M2\"\nval defaultScalaVersion = \"2.13.14\"\nval pwd = os.Path(sys.env(\"MILL_WORKSPACE_ROOT\"))\n\nobject v {\n  def chiselIvy: Option[Dep] = Some(ivy\"org.chipsalliance::chisel:${chiselVersion}\")\n  def chiselPluginIvy: Option[Dep] = Some(ivy\"org.chipsalliance:::chisel-plugin:${chiselVersion}\")\n}\n\ntrait HasThisChisel extends SbtModule {\n  def chiselModule: Option[ScalaModule] = None\n  def chiselPluginJar: T[Option[PathRef]] = None\n  def chiselIvy: Option[Dep] = v.chiselIvy\n  def chiselPluginIvy: Option[Dep] = v.chiselPluginIvy\n  override def scalaVersion = defaultScalaVersion\n  override def scalacOptions = super.scalacOptions() ++\n    Agg(\"-language:reflectiveCalls\", \"-Ymacro-annotations\", \"-Ytasty-reader\")\n  override def ivyDeps = super.ivyDeps() ++ Agg(chiselIvy.get)\n  override def scalacPluginIvyDeps = super.scalacPluginIvyDeps() ++ Agg(chiselPluginIvy.get)\n}\n\nobject rocketchip extends RocketChip\ntrait RocketChip extends rocketChipCommon.RocketChipModule with HasThisChisel {\n  override def scalaVersion: T[String] = T(defaultScalaVersion)\n  override def millSourcePath = pwd / \"rocket-chip\"\n  def dependencyPath = pwd / \"rocket-chip\" / \"dependencies\"\n  def macrosModule = macros\n  def hardfloatModule = hardfloat\n  def cdeModule = cde\n  def diplomacyModule = diplomacy\n  def diplomacyIvy = None\n  def mainargsIvy = ivy\"com.lihaoyi::mainargs:0.5.4\"\n  def json4sJacksonIvy = ivy\"org.json4s::json4s-jackson:4.0.6\"\n\n  object macros extends Macros\n  trait Macros extends rocketChipCommon.MacrosModule with SbtModule {\n    def scalaVersion: T[String] = T(defaultScalaVersion)\n    def scalaReflectIvy = ivy\"org.scala-lang:scala-reflect:${defaultScalaVersion}\"\n  }\n\n  object hardfloat extends Hardfloat\n  trait Hardfloat extends hardfloatCommon.HardfloatModule with HasThisChisel {\n    override def scalaVersion: T[String] = T(defaultScalaVersion)\n    override def millSourcePath = dependencyPath / \"hardfloat\" / \"hardfloat\"\n  }\n\n  object cde extends CDE\n  trait CDE extends cdeCommon.CDEModule with ScalaModule {\n    def scalaVersion: T[String] = T(defaultScalaVersion)\n    override def millSourcePath = dependencyPath / \"cde\" / \"cde\"\n  }\n\n  object diplomacy extends Diplomacy\n  trait Diplomacy extends diplomacyCommon.DiplomacyModule with ScalaModule {\n    def scalaVersion: T[String] = T(defaultScalaVersion)\n    override def millSourcePath = dependencyPath / \"diplomacy\" / \"diplomacy\"\n\n    def chiselModule: Option[ScalaModule] = None\n    def chiselPluginJar: T[Option[PathRef]] = None\n    def chiselIvy: Option[Dep] = v.chiselIvy\n    def chiselPluginIvy: Option[Dep] = v.chiselPluginIvy\n\n    def cdeModule = cde\n    def sourcecodeIvy = ivy\"com.lihaoyi::sourcecode:0.3.1\"\n  }\n}\n\ntrait ysyxSoCModule extends ScalaModule {\n  def rocketModule: ScalaModule\n  override def moduleDeps = super.moduleDeps ++ Seq(\n    rocketModule,\n  )\n}\n\nobject ysyxsoc extends ysyxSoC\ntrait ysyxSoC extends ysyxSoCModule with HasThisChisel {\n  override def millSourcePath = pwd\n  override def sources = Task.Sources(millSourcePath / \"src\")\n  def rocketModule = rocketchip\n}\n"
            ]
        ],
        "repos": [],
        "ivyDeps": [],
        "errors": [],
        "metaBuild": false,
        "buildFile": "build.sc"
    },
    "valueHash": -1995759338,
    "inputsHash": 1984945212
}