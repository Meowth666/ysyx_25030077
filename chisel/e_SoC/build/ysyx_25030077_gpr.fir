circuit ysyx_25030077_gpr :
  module MaxPeriodFibonacciLFSR :
    input clock : Clock
    input reset : Reset
    output io : { flip seed : { valid : UInt<1>, bits : UInt<1>[16]}, flip increment : UInt<1>, out : UInt<1>[16]}

    wire _state_WIRE : UInt<1>[16] @[PRNG.scala 46:28]
    _state_WIRE[0] <= UInt<1>("h1") @[PRNG.scala 46:28]
    _state_WIRE[1] <= UInt<1>("h0") @[PRNG.scala 46:28]
    _state_WIRE[2] <= UInt<1>("h0") @[PRNG.scala 46:28]
    _state_WIRE[3] <= UInt<1>("h0") @[PRNG.scala 46:28]
    _state_WIRE[4] <= UInt<1>("h0") @[PRNG.scala 46:28]
    _state_WIRE[5] <= UInt<1>("h0") @[PRNG.scala 46:28]
    _state_WIRE[6] <= UInt<1>("h0") @[PRNG.scala 46:28]
    _state_WIRE[7] <= UInt<1>("h0") @[PRNG.scala 46:28]
    _state_WIRE[8] <= UInt<1>("h0") @[PRNG.scala 46:28]
    _state_WIRE[9] <= UInt<1>("h0") @[PRNG.scala 46:28]
    _state_WIRE[10] <= UInt<1>("h0") @[PRNG.scala 46:28]
    _state_WIRE[11] <= UInt<1>("h0") @[PRNG.scala 46:28]
    _state_WIRE[12] <= UInt<1>("h0") @[PRNG.scala 46:28]
    _state_WIRE[13] <= UInt<1>("h0") @[PRNG.scala 46:28]
    _state_WIRE[14] <= UInt<1>("h0") @[PRNG.scala 46:28]
    _state_WIRE[15] <= UInt<1>("h0") @[PRNG.scala 46:28]
    reg state : UInt<1>[16], clock with :
      reset => (reset, _state_WIRE) @[PRNG.scala 55:49]
    when io.increment : @[PRNG.scala 69:22]
      node _T = xor(state[15], state[13]) @[LFSR.scala 15:41]
      node _T_1 = xor(_T, state[12]) @[LFSR.scala 15:41]
      node _T_2 = xor(_T_1, state[10]) @[LFSR.scala 15:41]
      state[0] <= _T_2 @[PRNG.scala 70:11]
      state[1] <= state[0] @[PRNG.scala 70:11]
      state[2] <= state[1] @[PRNG.scala 70:11]
      state[3] <= state[2] @[PRNG.scala 70:11]
      state[4] <= state[3] @[PRNG.scala 70:11]
      state[5] <= state[4] @[PRNG.scala 70:11]
      state[6] <= state[5] @[PRNG.scala 70:11]
      state[7] <= state[6] @[PRNG.scala 70:11]
      state[8] <= state[7] @[PRNG.scala 70:11]
      state[9] <= state[8] @[PRNG.scala 70:11]
      state[10] <= state[9] @[PRNG.scala 70:11]
      state[11] <= state[10] @[PRNG.scala 70:11]
      state[12] <= state[11] @[PRNG.scala 70:11]
      state[13] <= state[12] @[PRNG.scala 70:11]
      state[14] <= state[13] @[PRNG.scala 70:11]
      state[15] <= state[14] @[PRNG.scala 70:11]
    when io.seed.valid : @[PRNG.scala 73:22]
      state[0] <= io.seed.bits[0] @[PRNG.scala 74:11]
      state[1] <= io.seed.bits[1] @[PRNG.scala 74:11]
      state[2] <= io.seed.bits[2] @[PRNG.scala 74:11]
      state[3] <= io.seed.bits[3] @[PRNG.scala 74:11]
      state[4] <= io.seed.bits[4] @[PRNG.scala 74:11]
      state[5] <= io.seed.bits[5] @[PRNG.scala 74:11]
      state[6] <= io.seed.bits[6] @[PRNG.scala 74:11]
      state[7] <= io.seed.bits[7] @[PRNG.scala 74:11]
      state[8] <= io.seed.bits[8] @[PRNG.scala 74:11]
      state[9] <= io.seed.bits[9] @[PRNG.scala 74:11]
      state[10] <= io.seed.bits[10] @[PRNG.scala 74:11]
      state[11] <= io.seed.bits[11] @[PRNG.scala 74:11]
      state[12] <= io.seed.bits[12] @[PRNG.scala 74:11]
      state[13] <= io.seed.bits[13] @[PRNG.scala 74:11]
      state[14] <= io.seed.bits[14] @[PRNG.scala 74:11]
      state[15] <= io.seed.bits[15] @[PRNG.scala 74:11]
    io.out <= state @[PRNG.scala 78:10]

  module ysyx_25030077_gpr :
    input clock : Clock
    input reset : UInt<1>
    output io : { flip mem_Req : { flip ready : UInt<1>, valid : UInt<1>, bits : { }}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { }}, flip gpr_b_resp : UInt<2>, flip pc_next : UInt<32>, flip waddr_rd : UInt<5>, flip wdata_rd : UInt<32>, flip raddr_rs1 : UInt<5>, rdata_rs1 : UInt<32>, flip raddr_rs2 : UInt<5>, rdata_rs2 : UInt<32>, ifu_Req : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>}}}

    wire _regs_WIRE : UInt<32>[32] @[ysyx_25030077_gpr.scala 21:29]
    _regs_WIRE[0] <= UInt<32>("h0") @[ysyx_25030077_gpr.scala 21:29]
    _regs_WIRE[1] <= UInt<32>("h0") @[ysyx_25030077_gpr.scala 21:29]
    _regs_WIRE[2] <= UInt<32>("h0") @[ysyx_25030077_gpr.scala 21:29]
    _regs_WIRE[3] <= UInt<32>("h0") @[ysyx_25030077_gpr.scala 21:29]
    _regs_WIRE[4] <= UInt<32>("h0") @[ysyx_25030077_gpr.scala 21:29]
    _regs_WIRE[5] <= UInt<32>("h0") @[ysyx_25030077_gpr.scala 21:29]
    _regs_WIRE[6] <= UInt<32>("h0") @[ysyx_25030077_gpr.scala 21:29]
    _regs_WIRE[7] <= UInt<32>("h0") @[ysyx_25030077_gpr.scala 21:29]
    _regs_WIRE[8] <= UInt<32>("h0") @[ysyx_25030077_gpr.scala 21:29]
    _regs_WIRE[9] <= UInt<32>("h0") @[ysyx_25030077_gpr.scala 21:29]
    _regs_WIRE[10] <= UInt<32>("h0") @[ysyx_25030077_gpr.scala 21:29]
    _regs_WIRE[11] <= UInt<32>("h0") @[ysyx_25030077_gpr.scala 21:29]
    _regs_WIRE[12] <= UInt<32>("h0") @[ysyx_25030077_gpr.scala 21:29]
    _regs_WIRE[13] <= UInt<32>("h0") @[ysyx_25030077_gpr.scala 21:29]
    _regs_WIRE[14] <= UInt<32>("h0") @[ysyx_25030077_gpr.scala 21:29]
    _regs_WIRE[15] <= UInt<32>("h0") @[ysyx_25030077_gpr.scala 21:29]
    _regs_WIRE[16] <= UInt<32>("h0") @[ysyx_25030077_gpr.scala 21:29]
    _regs_WIRE[17] <= UInt<32>("h0") @[ysyx_25030077_gpr.scala 21:29]
    _regs_WIRE[18] <= UInt<32>("h0") @[ysyx_25030077_gpr.scala 21:29]
    _regs_WIRE[19] <= UInt<32>("h0") @[ysyx_25030077_gpr.scala 21:29]
    _regs_WIRE[20] <= UInt<32>("h0") @[ysyx_25030077_gpr.scala 21:29]
    _regs_WIRE[21] <= UInt<32>("h0") @[ysyx_25030077_gpr.scala 21:29]
    _regs_WIRE[22] <= UInt<32>("h0") @[ysyx_25030077_gpr.scala 21:29]
    _regs_WIRE[23] <= UInt<32>("h0") @[ysyx_25030077_gpr.scala 21:29]
    _regs_WIRE[24] <= UInt<32>("h0") @[ysyx_25030077_gpr.scala 21:29]
    _regs_WIRE[25] <= UInt<32>("h0") @[ysyx_25030077_gpr.scala 21:29]
    _regs_WIRE[26] <= UInt<32>("h0") @[ysyx_25030077_gpr.scala 21:29]
    _regs_WIRE[27] <= UInt<32>("h0") @[ysyx_25030077_gpr.scala 21:29]
    _regs_WIRE[28] <= UInt<32>("h0") @[ysyx_25030077_gpr.scala 21:29]
    _regs_WIRE[29] <= UInt<32>("h0") @[ysyx_25030077_gpr.scala 21:29]
    _regs_WIRE[30] <= UInt<32>("h0") @[ysyx_25030077_gpr.scala 21:29]
    _regs_WIRE[31] <= UInt<32>("h0") @[ysyx_25030077_gpr.scala 21:29]
    reg regs : UInt<32>[32], clock with :
      reset => (reset, _regs_WIRE) @[ysyx_25030077_gpr.scala 21:21]
    reg validReg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[ysyx_25030077_gpr.scala 22:25]
    inst canAccept_prng of MaxPeriodFibonacciLFSR @[PRNG.scala 91:22]
    canAccept_prng.clock <= clock
    canAccept_prng.reset <= reset
    canAccept_prng.io.seed.valid <= UInt<1>("h0") @[PRNG.scala 92:24]
    canAccept_prng.io.seed.bits[0] is invalid @[PRNG.scala 93:23]
    canAccept_prng.io.seed.bits[1] is invalid @[PRNG.scala 93:23]
    canAccept_prng.io.seed.bits[2] is invalid @[PRNG.scala 93:23]
    canAccept_prng.io.seed.bits[3] is invalid @[PRNG.scala 93:23]
    canAccept_prng.io.seed.bits[4] is invalid @[PRNG.scala 93:23]
    canAccept_prng.io.seed.bits[5] is invalid @[PRNG.scala 93:23]
    canAccept_prng.io.seed.bits[6] is invalid @[PRNG.scala 93:23]
    canAccept_prng.io.seed.bits[7] is invalid @[PRNG.scala 93:23]
    canAccept_prng.io.seed.bits[8] is invalid @[PRNG.scala 93:23]
    canAccept_prng.io.seed.bits[9] is invalid @[PRNG.scala 93:23]
    canAccept_prng.io.seed.bits[10] is invalid @[PRNG.scala 93:23]
    canAccept_prng.io.seed.bits[11] is invalid @[PRNG.scala 93:23]
    canAccept_prng.io.seed.bits[12] is invalid @[PRNG.scala 93:23]
    canAccept_prng.io.seed.bits[13] is invalid @[PRNG.scala 93:23]
    canAccept_prng.io.seed.bits[14] is invalid @[PRNG.scala 93:23]
    canAccept_prng.io.seed.bits[15] is invalid @[PRNG.scala 93:23]
    canAccept_prng.io.increment <= UInt<1>("h1") @[PRNG.scala 94:23]
    node canAccept_lo_lo_lo = cat(canAccept_prng.io.out[1], canAccept_prng.io.out[0]) @[PRNG.scala 95:17]
    node canAccept_lo_lo_hi = cat(canAccept_prng.io.out[3], canAccept_prng.io.out[2]) @[PRNG.scala 95:17]
    node canAccept_lo_lo = cat(canAccept_lo_lo_hi, canAccept_lo_lo_lo) @[PRNG.scala 95:17]
    node canAccept_lo_hi_lo = cat(canAccept_prng.io.out[5], canAccept_prng.io.out[4]) @[PRNG.scala 95:17]
    node canAccept_lo_hi_hi = cat(canAccept_prng.io.out[7], canAccept_prng.io.out[6]) @[PRNG.scala 95:17]
    node canAccept_lo_hi = cat(canAccept_lo_hi_hi, canAccept_lo_hi_lo) @[PRNG.scala 95:17]
    node canAccept_lo = cat(canAccept_lo_hi, canAccept_lo_lo) @[PRNG.scala 95:17]
    node canAccept_hi_lo_lo = cat(canAccept_prng.io.out[9], canAccept_prng.io.out[8]) @[PRNG.scala 95:17]
    node canAccept_hi_lo_hi = cat(canAccept_prng.io.out[11], canAccept_prng.io.out[10]) @[PRNG.scala 95:17]
    node canAccept_hi_lo = cat(canAccept_hi_lo_hi, canAccept_hi_lo_lo) @[PRNG.scala 95:17]
    node canAccept_hi_hi_lo = cat(canAccept_prng.io.out[13], canAccept_prng.io.out[12]) @[PRNG.scala 95:17]
    node canAccept_hi_hi_hi = cat(canAccept_prng.io.out[15], canAccept_prng.io.out[14]) @[PRNG.scala 95:17]
    node canAccept_hi_hi = cat(canAccept_hi_hi_hi, canAccept_hi_hi_lo) @[PRNG.scala 95:17]
    node canAccept_hi = cat(canAccept_hi_hi, canAccept_hi_lo) @[PRNG.scala 95:17]
    node _canAccept_T = cat(canAccept_hi, canAccept_lo) @[PRNG.scala 95:17]
    node canAccept = bits(_canAccept_T, 0, 0) @[ysyx_25030077_gpr.scala 23:27]
    reg pc_next_reg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h80000000")) @[ysyx_25030077_gpr.scala 24:28]
    node _reg_data_write_T = eq(io.waddr_rd, UInt<1>("h0")) @[ysyx_25030077_gpr.scala 26:40]
    node reg_data_write = mux(_reg_data_write_T, UInt<1>("h0"), io.wdata_rd) @[ysyx_25030077_gpr.scala 26:27]
    node _validReg_T = and(io.mem_Req.valid, canAccept) @[ysyx_25030077_gpr.scala 27:36]
    node _validReg_T_1 = mux(io.ifu_Req.ready, UInt<1>("h0"), validReg) @[ysyx_25030077_gpr.scala 28:20]
    node _validReg_T_2 = mux(_validReg_T, UInt<1>("h1"), _validReg_T_1) @[ysyx_25030077_gpr.scala 27:18]
    validReg <= _validReg_T_2 @[ysyx_25030077_gpr.scala 27:12]
    io.rdata_rs1 <= regs[io.raddr_rs1] @[ysyx_25030077_gpr.scala 31:16]
    io.rdata_rs2 <= regs[io.raddr_rs2] @[ysyx_25030077_gpr.scala 32:16]
    io.ifu_Req.bits.addr <= pc_next_reg @[ysyx_25030077_gpr.scala 33:24]
    node _regs_T = and(io.mem_Req.valid, canAccept) @[ysyx_25030077_gpr.scala 35:45]
    node _regs_T_1 = mux(_regs_T, reg_data_write, regs[io.waddr_rd]) @[ysyx_25030077_gpr.scala 35:27]
    regs[io.waddr_rd] <= _regs_T_1 @[ysyx_25030077_gpr.scala 35:21]
    node _pc_next_reg_T = and(io.mem_Req.valid, canAccept) @[ysyx_25030077_gpr.scala 36:39]
    node _pc_next_reg_T_1 = mux(_pc_next_reg_T, io.pc_next, pc_next_reg) @[ysyx_25030077_gpr.scala 36:21]
    pc_next_reg <= _pc_next_reg_T_1 @[ysyx_25030077_gpr.scala 36:15]
    io.ifu_Req.valid <= validReg @[ysyx_25030077_gpr.scala 37:20]
    io.mem_Req.ready <= canAccept @[ysyx_25030077_gpr.scala 38:20]
    io.b.ready <= canAccept @[ysyx_25030077_gpr.scala 39:14]

