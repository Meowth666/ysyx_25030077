circuit ysyx_25030077_UART :
  module MaxPeriodFibonacciLFSR :
    input clock : Clock
    input reset : Reset
    output io : { flip seed : { valid : UInt<1>, bits : UInt<1>[16]}, flip increment : UInt<1>, out : UInt<1>[16]}

    wire _state_WIRE : UInt<1>[16] @[PRNG.scala 46:28]
    _state_WIRE[0] <= UInt<1>("h1") @[PRNG.scala 46:28]
    _state_WIRE[1] <= UInt<1>("h0") @[PRNG.scala 46:28]
    _state_WIRE[2] <= UInt<1>("h0") @[PRNG.scala 46:28]
    _state_WIRE[3] <= UInt<1>("h0") @[PRNG.scala 46:28]
    _state_WIRE[4] <= UInt<1>("h0") @[PRNG.scala 46:28]
    _state_WIRE[5] <= UInt<1>("h0") @[PRNG.scala 46:28]
    _state_WIRE[6] <= UInt<1>("h0") @[PRNG.scala 46:28]
    _state_WIRE[7] <= UInt<1>("h0") @[PRNG.scala 46:28]
    _state_WIRE[8] <= UInt<1>("h0") @[PRNG.scala 46:28]
    _state_WIRE[9] <= UInt<1>("h0") @[PRNG.scala 46:28]
    _state_WIRE[10] <= UInt<1>("h0") @[PRNG.scala 46:28]
    _state_WIRE[11] <= UInt<1>("h0") @[PRNG.scala 46:28]
    _state_WIRE[12] <= UInt<1>("h0") @[PRNG.scala 46:28]
    _state_WIRE[13] <= UInt<1>("h0") @[PRNG.scala 46:28]
    _state_WIRE[14] <= UInt<1>("h0") @[PRNG.scala 46:28]
    _state_WIRE[15] <= UInt<1>("h0") @[PRNG.scala 46:28]
    reg state : UInt<1>[16], clock with :
      reset => (reset, _state_WIRE) @[PRNG.scala 55:49]
    when io.increment : @[PRNG.scala 69:22]
      node _T = xor(state[15], state[13]) @[LFSR.scala 15:41]
      node _T_1 = xor(_T, state[12]) @[LFSR.scala 15:41]
      node _T_2 = xor(_T_1, state[10]) @[LFSR.scala 15:41]
      state[0] <= _T_2 @[PRNG.scala 70:11]
      state[1] <= state[0] @[PRNG.scala 70:11]
      state[2] <= state[1] @[PRNG.scala 70:11]
      state[3] <= state[2] @[PRNG.scala 70:11]
      state[4] <= state[3] @[PRNG.scala 70:11]
      state[5] <= state[4] @[PRNG.scala 70:11]
      state[6] <= state[5] @[PRNG.scala 70:11]
      state[7] <= state[6] @[PRNG.scala 70:11]
      state[8] <= state[7] @[PRNG.scala 70:11]
      state[9] <= state[8] @[PRNG.scala 70:11]
      state[10] <= state[9] @[PRNG.scala 70:11]
      state[11] <= state[10] @[PRNG.scala 70:11]
      state[12] <= state[11] @[PRNG.scala 70:11]
      state[13] <= state[12] @[PRNG.scala 70:11]
      state[14] <= state[13] @[PRNG.scala 70:11]
      state[15] <= state[14] @[PRNG.scala 70:11]
    when io.seed.valid : @[PRNG.scala 73:22]
      state[0] <= io.seed.bits[0] @[PRNG.scala 74:11]
      state[1] <= io.seed.bits[1] @[PRNG.scala 74:11]
      state[2] <= io.seed.bits[2] @[PRNG.scala 74:11]
      state[3] <= io.seed.bits[3] @[PRNG.scala 74:11]
      state[4] <= io.seed.bits[4] @[PRNG.scala 74:11]
      state[5] <= io.seed.bits[5] @[PRNG.scala 74:11]
      state[6] <= io.seed.bits[6] @[PRNG.scala 74:11]
      state[7] <= io.seed.bits[7] @[PRNG.scala 74:11]
      state[8] <= io.seed.bits[8] @[PRNG.scala 74:11]
      state[9] <= io.seed.bits[9] @[PRNG.scala 74:11]
      state[10] <= io.seed.bits[10] @[PRNG.scala 74:11]
      state[11] <= io.seed.bits[11] @[PRNG.scala 74:11]
      state[12] <= io.seed.bits[12] @[PRNG.scala 74:11]
      state[13] <= io.seed.bits[13] @[PRNG.scala 74:11]
      state[14] <= io.seed.bits[14] @[PRNG.scala 74:11]
      state[15] <= io.seed.bits[15] @[PRNG.scala 74:11]
    io.out <= state @[PRNG.scala 78:10]

  module ysyx_25030077_UART :
    input clock : Clock
    input reset : UInt<1>
    output io : { flip aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { }}, flip w : { flip ready : UInt<1>, valid : UInt<1>, bits : { }}, flip waddr : UInt<32>, flip wdata : UInt<32>, flip w_mask : UInt<3>}

    inst canAccept_prng of MaxPeriodFibonacciLFSR @[PRNG.scala 91:22]
    canAccept_prng.clock <= clock
    canAccept_prng.reset <= reset
    canAccept_prng.io.seed.valid <= UInt<1>("h0") @[PRNG.scala 92:24]
    canAccept_prng.io.seed.bits[0] is invalid @[PRNG.scala 93:23]
    canAccept_prng.io.seed.bits[1] is invalid @[PRNG.scala 93:23]
    canAccept_prng.io.seed.bits[2] is invalid @[PRNG.scala 93:23]
    canAccept_prng.io.seed.bits[3] is invalid @[PRNG.scala 93:23]
    canAccept_prng.io.seed.bits[4] is invalid @[PRNG.scala 93:23]
    canAccept_prng.io.seed.bits[5] is invalid @[PRNG.scala 93:23]
    canAccept_prng.io.seed.bits[6] is invalid @[PRNG.scala 93:23]
    canAccept_prng.io.seed.bits[7] is invalid @[PRNG.scala 93:23]
    canAccept_prng.io.seed.bits[8] is invalid @[PRNG.scala 93:23]
    canAccept_prng.io.seed.bits[9] is invalid @[PRNG.scala 93:23]
    canAccept_prng.io.seed.bits[10] is invalid @[PRNG.scala 93:23]
    canAccept_prng.io.seed.bits[11] is invalid @[PRNG.scala 93:23]
    canAccept_prng.io.seed.bits[12] is invalid @[PRNG.scala 93:23]
    canAccept_prng.io.seed.bits[13] is invalid @[PRNG.scala 93:23]
    canAccept_prng.io.seed.bits[14] is invalid @[PRNG.scala 93:23]
    canAccept_prng.io.seed.bits[15] is invalid @[PRNG.scala 93:23]
    canAccept_prng.io.increment <= UInt<1>("h1") @[PRNG.scala 94:23]
    node canAccept_lo_lo_lo = cat(canAccept_prng.io.out[1], canAccept_prng.io.out[0]) @[PRNG.scala 95:17]
    node canAccept_lo_lo_hi = cat(canAccept_prng.io.out[3], canAccept_prng.io.out[2]) @[PRNG.scala 95:17]
    node canAccept_lo_lo = cat(canAccept_lo_lo_hi, canAccept_lo_lo_lo) @[PRNG.scala 95:17]
    node canAccept_lo_hi_lo = cat(canAccept_prng.io.out[5], canAccept_prng.io.out[4]) @[PRNG.scala 95:17]
    node canAccept_lo_hi_hi = cat(canAccept_prng.io.out[7], canAccept_prng.io.out[6]) @[PRNG.scala 95:17]
    node canAccept_lo_hi = cat(canAccept_lo_hi_hi, canAccept_lo_hi_lo) @[PRNG.scala 95:17]
    node canAccept_lo = cat(canAccept_lo_hi, canAccept_lo_lo) @[PRNG.scala 95:17]
    node canAccept_hi_lo_lo = cat(canAccept_prng.io.out[9], canAccept_prng.io.out[8]) @[PRNG.scala 95:17]
    node canAccept_hi_lo_hi = cat(canAccept_prng.io.out[11], canAccept_prng.io.out[10]) @[PRNG.scala 95:17]
    node canAccept_hi_lo = cat(canAccept_hi_lo_hi, canAccept_hi_lo_lo) @[PRNG.scala 95:17]
    node canAccept_hi_hi_lo = cat(canAccept_prng.io.out[13], canAccept_prng.io.out[12]) @[PRNG.scala 95:17]
    node canAccept_hi_hi_hi = cat(canAccept_prng.io.out[15], canAccept_prng.io.out[14]) @[PRNG.scala 95:17]
    node canAccept_hi_hi = cat(canAccept_hi_hi_hi, canAccept_hi_hi_lo) @[PRNG.scala 95:17]
    node canAccept_hi = cat(canAccept_hi_hi, canAccept_hi_lo) @[PRNG.scala 95:17]
    node _canAccept_T = cat(canAccept_hi, canAccept_lo) @[PRNG.scala 95:17]
    node canAccept = bits(_canAccept_T, 0, 0) @[ysyx_25030077_UART.scala 14:30]
    io.aw.ready <= canAccept @[ysyx_25030077_UART.scala 16:17]
    io.w.ready <= canAccept @[ysyx_25030077_UART.scala 17:17]
    node charToPrint = bits(io.wdata, 7, 0) @[ysyx_25030077_UART.scala 21:31]
    node _T = and(io.aw.valid, canAccept) @[ysyx_25030077_UART.scala 22:33]
    node _T_1 = and(_T, io.w.valid) @[ysyx_25030077_UART.scala 22:46]
    node _T_2 = eq(io.waddr, UInt<32>("ha00003f8")) @[ysyx_25030077_UART.scala 22:73]
    node _T_3 = and(_T_1, _T_2) @[ysyx_25030077_UART.scala 22:60]
    node _T_4 = mux(_T_3, charToPrint, UInt<1>("h0")) @[ysyx_25030077_UART.scala 22:19]
    node _T_5 = bits(reset, 0, 0) @[ysyx_25030077_UART.scala 22:11]
    node _T_6 = eq(_T_5, UInt<1>("h0")) @[ysyx_25030077_UART.scala 22:11]
    when _T_6 : @[ysyx_25030077_UART.scala 22:11]
      printf(clock, UInt<1>("h1"), "%d%%c", _T_4) : printf @[ysyx_25030077_UART.scala 22:11]

