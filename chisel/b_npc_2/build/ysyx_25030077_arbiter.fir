circuit ysyx_25030077_arbiter :
  module MaxPeriodFibonacciLFSR :
    input clock : Clock
    input reset : Reset
    output io : { flip seed : { valid : UInt<1>, bits : UInt<1>[16]}, flip increment : UInt<1>, out : UInt<1>[16]}

    wire _state_WIRE : UInt<1>[16] @[PRNG.scala 46:28]
    _state_WIRE[0] <= UInt<1>("h1") @[PRNG.scala 46:28]
    _state_WIRE[1] <= UInt<1>("h0") @[PRNG.scala 46:28]
    _state_WIRE[2] <= UInt<1>("h0") @[PRNG.scala 46:28]
    _state_WIRE[3] <= UInt<1>("h0") @[PRNG.scala 46:28]
    _state_WIRE[4] <= UInt<1>("h0") @[PRNG.scala 46:28]
    _state_WIRE[5] <= UInt<1>("h0") @[PRNG.scala 46:28]
    _state_WIRE[6] <= UInt<1>("h0") @[PRNG.scala 46:28]
    _state_WIRE[7] <= UInt<1>("h0") @[PRNG.scala 46:28]
    _state_WIRE[8] <= UInt<1>("h0") @[PRNG.scala 46:28]
    _state_WIRE[9] <= UInt<1>("h0") @[PRNG.scala 46:28]
    _state_WIRE[10] <= UInt<1>("h0") @[PRNG.scala 46:28]
    _state_WIRE[11] <= UInt<1>("h0") @[PRNG.scala 46:28]
    _state_WIRE[12] <= UInt<1>("h0") @[PRNG.scala 46:28]
    _state_WIRE[13] <= UInt<1>("h0") @[PRNG.scala 46:28]
    _state_WIRE[14] <= UInt<1>("h0") @[PRNG.scala 46:28]
    _state_WIRE[15] <= UInt<1>("h0") @[PRNG.scala 46:28]
    reg state : UInt<1>[16], clock with :
      reset => (reset, _state_WIRE) @[PRNG.scala 55:49]
    when io.increment : @[PRNG.scala 69:22]
      node _T = xor(state[15], state[13]) @[LFSR.scala 15:41]
      node _T_1 = xor(_T, state[12]) @[LFSR.scala 15:41]
      node _T_2 = xor(_T_1, state[10]) @[LFSR.scala 15:41]
      state[0] <= _T_2 @[PRNG.scala 70:11]
      state[1] <= state[0] @[PRNG.scala 70:11]
      state[2] <= state[1] @[PRNG.scala 70:11]
      state[3] <= state[2] @[PRNG.scala 70:11]
      state[4] <= state[3] @[PRNG.scala 70:11]
      state[5] <= state[4] @[PRNG.scala 70:11]
      state[6] <= state[5] @[PRNG.scala 70:11]
      state[7] <= state[6] @[PRNG.scala 70:11]
      state[8] <= state[7] @[PRNG.scala 70:11]
      state[9] <= state[8] @[PRNG.scala 70:11]
      state[10] <= state[9] @[PRNG.scala 70:11]
      state[11] <= state[10] @[PRNG.scala 70:11]
      state[12] <= state[11] @[PRNG.scala 70:11]
      state[13] <= state[12] @[PRNG.scala 70:11]
      state[14] <= state[13] @[PRNG.scala 70:11]
      state[15] <= state[14] @[PRNG.scala 70:11]
    when io.seed.valid : @[PRNG.scala 73:22]
      state[0] <= io.seed.bits[0] @[PRNG.scala 74:11]
      state[1] <= io.seed.bits[1] @[PRNG.scala 74:11]
      state[2] <= io.seed.bits[2] @[PRNG.scala 74:11]
      state[3] <= io.seed.bits[3] @[PRNG.scala 74:11]
      state[4] <= io.seed.bits[4] @[PRNG.scala 74:11]
      state[5] <= io.seed.bits[5] @[PRNG.scala 74:11]
      state[6] <= io.seed.bits[6] @[PRNG.scala 74:11]
      state[7] <= io.seed.bits[7] @[PRNG.scala 74:11]
      state[8] <= io.seed.bits[8] @[PRNG.scala 74:11]
      state[9] <= io.seed.bits[9] @[PRNG.scala 74:11]
      state[10] <= io.seed.bits[10] @[PRNG.scala 74:11]
      state[11] <= io.seed.bits[11] @[PRNG.scala 74:11]
      state[12] <= io.seed.bits[12] @[PRNG.scala 74:11]
      state[13] <= io.seed.bits[13] @[PRNG.scala 74:11]
      state[14] <= io.seed.bits[14] @[PRNG.scala 74:11]
      state[15] <= io.seed.bits[15] @[PRNG.scala 74:11]
    io.out <= state @[PRNG.scala 78:10]

  module ysyx_25030077_arbiter :
    input clock : Clock
    input reset : UInt<1>
    output io : { flip ifu_valid : UInt<1>, flip pc : UInt<32>, flip rs1_data : UInt<32>, flip rs2_data : UInt<32>, flip imm : UInt<32>, flip r_mask : UInt<3>, flip w_mask : UInt<3>, axi_ar_valid : UInt<1>, axi_ar_addr : UInt<32>, axi_ar_strb : UInt<3>, flip axi_ar_ready : UInt<1>, axi_aw_valid : UInt<1>, axi_aw_addr : UInt<32>, flip axi_aw_ready : UInt<1>, axi_w_valid : UInt<1>, axi_w_data : UInt<32>, axi_w_strb : UInt<3>, flip axi_w_ready : UInt<1>, flip axi_r_valid : UInt<1>, flip axi_r_data : UInt<32>, axi_r_ready : UInt<1>, flip axi_b_valid : UInt<1>, axi_b_ready : UInt<1>, flip axi_b_resp : UInt<2>, gpr_b_resp : UInt<2>, gpr_r_valid : UInt<1>, gpr_b_valid : UInt<1>, flip gpr_r_ready : UInt<1>, flip gpr_b_ready : UInt<1>, gpr_data : UInt<32>, inst : UInt<32>, ifu_ready : UInt<1>, flip r_valid_lsu : UInt<1>}

    reg state_reg : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[ysyx_25030077_arbiter.scala 53:28]
    reg inst_reg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[ysyx_25030077_arbiter.scala 54:27]
    reg axi_r_valid_delay : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[ysyx_25030077_arbiter.scala 55:36]
    inst canAccept_prng of MaxPeriodFibonacciLFSR @[PRNG.scala 91:22]
    canAccept_prng.clock <= clock
    canAccept_prng.reset <= reset
    canAccept_prng.io.seed.valid <= UInt<1>("h0") @[PRNG.scala 92:24]
    canAccept_prng.io.seed.bits[0] is invalid @[PRNG.scala 93:23]
    canAccept_prng.io.seed.bits[1] is invalid @[PRNG.scala 93:23]
    canAccept_prng.io.seed.bits[2] is invalid @[PRNG.scala 93:23]
    canAccept_prng.io.seed.bits[3] is invalid @[PRNG.scala 93:23]
    canAccept_prng.io.seed.bits[4] is invalid @[PRNG.scala 93:23]
    canAccept_prng.io.seed.bits[5] is invalid @[PRNG.scala 93:23]
    canAccept_prng.io.seed.bits[6] is invalid @[PRNG.scala 93:23]
    canAccept_prng.io.seed.bits[7] is invalid @[PRNG.scala 93:23]
    canAccept_prng.io.seed.bits[8] is invalid @[PRNG.scala 93:23]
    canAccept_prng.io.seed.bits[9] is invalid @[PRNG.scala 93:23]
    canAccept_prng.io.seed.bits[10] is invalid @[PRNG.scala 93:23]
    canAccept_prng.io.seed.bits[11] is invalid @[PRNG.scala 93:23]
    canAccept_prng.io.seed.bits[12] is invalid @[PRNG.scala 93:23]
    canAccept_prng.io.seed.bits[13] is invalid @[PRNG.scala 93:23]
    canAccept_prng.io.seed.bits[14] is invalid @[PRNG.scala 93:23]
    canAccept_prng.io.seed.bits[15] is invalid @[PRNG.scala 93:23]
    canAccept_prng.io.increment <= UInt<1>("h1") @[PRNG.scala 94:23]
    node canAccept_lo_lo_lo = cat(canAccept_prng.io.out[1], canAccept_prng.io.out[0]) @[PRNG.scala 95:17]
    node canAccept_lo_lo_hi = cat(canAccept_prng.io.out[3], canAccept_prng.io.out[2]) @[PRNG.scala 95:17]
    node canAccept_lo_lo = cat(canAccept_lo_lo_hi, canAccept_lo_lo_lo) @[PRNG.scala 95:17]
    node canAccept_lo_hi_lo = cat(canAccept_prng.io.out[5], canAccept_prng.io.out[4]) @[PRNG.scala 95:17]
    node canAccept_lo_hi_hi = cat(canAccept_prng.io.out[7], canAccept_prng.io.out[6]) @[PRNG.scala 95:17]
    node canAccept_lo_hi = cat(canAccept_lo_hi_hi, canAccept_lo_hi_lo) @[PRNG.scala 95:17]
    node canAccept_lo = cat(canAccept_lo_hi, canAccept_lo_lo) @[PRNG.scala 95:17]
    node canAccept_hi_lo_lo = cat(canAccept_prng.io.out[9], canAccept_prng.io.out[8]) @[PRNG.scala 95:17]
    node canAccept_hi_lo_hi = cat(canAccept_prng.io.out[11], canAccept_prng.io.out[10]) @[PRNG.scala 95:17]
    node canAccept_hi_lo = cat(canAccept_hi_lo_hi, canAccept_hi_lo_lo) @[PRNG.scala 95:17]
    node canAccept_hi_hi_lo = cat(canAccept_prng.io.out[13], canAccept_prng.io.out[12]) @[PRNG.scala 95:17]
    node canAccept_hi_hi_hi = cat(canAccept_prng.io.out[15], canAccept_prng.io.out[14]) @[PRNG.scala 95:17]
    node canAccept_hi_hi = cat(canAccept_hi_hi_hi, canAccept_hi_hi_lo) @[PRNG.scala 95:17]
    node canAccept_hi = cat(canAccept_hi_hi, canAccept_hi_lo) @[PRNG.scala 95:17]
    node _canAccept_T = cat(canAccept_hi, canAccept_lo) @[PRNG.scala 95:17]
    node canAccept = bits(_canAccept_T, 0, 0) @[ysyx_25030077_arbiter.scala 56:29]
    node _io_axi_ar_addr_T = add(io.rs1_data, io.imm) @[ysyx_25030077_arbiter.scala 57:44]
    node _io_axi_ar_addr_T_1 = bits(_io_axi_ar_addr_T, 31, 0) @[ysyx_25030077_arbiter.scala 57:54]
    node _io_axi_ar_addr_T_2 = eq(state_reg, UInt<1>("h0")) @[ysyx_25030077_arbiter.scala 58:42]
    node _io_axi_ar_addr_T_3 = mux(_io_axi_ar_addr_T_2, io.pc, _io_axi_ar_addr_T_1) @[Mux.scala 101:16]
    io.axi_ar_addr <= _io_axi_ar_addr_T_3 @[ysyx_25030077_arbiter.scala 57:20]
    axi_r_valid_delay <= io.axi_r_valid @[ysyx_25030077_arbiter.scala 60:23]
    node _state_reg_T = eq(state_reg, UInt<1>("h0")) @[ysyx_25030077_arbiter.scala 62:20]
    node _state_reg_T_1 = eq(io.axi_r_valid, UInt<1>("h1")) @[ysyx_25030077_arbiter.scala 62:52]
    node _state_reg_T_2 = and(_state_reg_T_1, io.axi_r_ready) @[ysyx_25030077_arbiter.scala 62:60]
    node _state_reg_T_3 = mux(_state_reg_T_2, UInt<1>("h1"), UInt<1>("h0")) @[ysyx_25030077_arbiter.scala 62:35]
    node _state_reg_T_4 = eq(state_reg, UInt<1>("h1")) @[ysyx_25030077_arbiter.scala 63:20]
    node _state_reg_T_5 = eq(io.r_valid_lsu, UInt<1>("h1")) @[ysyx_25030077_arbiter.scala 64:53]
    node _state_reg_T_6 = eq(io.axi_r_valid, UInt<1>("h1")) @[ysyx_25030077_arbiter.scala 64:89]
    node _state_reg_T_7 = eq(axi_r_valid_delay, UInt<1>("h0")) @[ysyx_25030077_arbiter.scala 64:119]
    node _state_reg_T_8 = and(_state_reg_T_6, _state_reg_T_7) @[ysyx_25030077_arbiter.scala 64:98]
    node _state_reg_T_9 = mux(_state_reg_T_8, UInt<2>("h2"), UInt<1>("h1")) @[ysyx_25030077_arbiter.scala 64:71]
    node _state_reg_T_10 = eq(io.r_valid_lsu, UInt<1>("h0")) @[ysyx_25030077_arbiter.scala 65:53]
    node _state_reg_T_11 = mux(_state_reg_T_10, UInt<2>("h2"), UInt<1>("h0")) @[Mux.scala 101:16]
    node _state_reg_T_12 = mux(_state_reg_T_5, _state_reg_T_9, _state_reg_T_11) @[Mux.scala 101:16]
    node _state_reg_T_13 = eq(state_reg, UInt<2>("h2")) @[ysyx_25030077_arbiter.scala 67:20]
    node _state_reg_T_14 = and(io.axi_r_valid, io.axi_ar_ready) @[ysyx_25030077_arbiter.scala 67:51]
    node _state_reg_T_15 = mux(_state_reg_T_14, UInt<1>("h0"), UInt<2>("h2")) @[ysyx_25030077_arbiter.scala 67:35]
    node _state_reg_T_16 = mux(_state_reg_T_13, _state_reg_T_15, UInt<1>("h0")) @[Mux.scala 101:16]
    node _state_reg_T_17 = mux(_state_reg_T_4, _state_reg_T_12, _state_reg_T_16) @[Mux.scala 101:16]
    node _state_reg_T_18 = mux(_state_reg_T, _state_reg_T_3, _state_reg_T_17) @[Mux.scala 101:16]
    state_reg <= _state_reg_T_18 @[ysyx_25030077_arbiter.scala 61:15]
    node _io_axi_aw_addr_T = eq(state_reg, UInt<1>("h1")) @[ysyx_25030077_arbiter.scala 71:42]
    node _io_axi_aw_addr_T_1 = add(io.rs1_data, io.imm) @[ysyx_25030077_arbiter.scala 71:67]
    node _io_axi_aw_addr_T_2 = bits(_io_axi_aw_addr_T_1, 31, 0) @[ysyx_25030077_arbiter.scala 71:77]
    node _io_axi_aw_addr_T_3 = mux(_io_axi_aw_addr_T, _io_axi_aw_addr_T_2, UInt<1>("h0")) @[Mux.scala 101:16]
    io.axi_aw_addr <= _io_axi_aw_addr_T_3 @[ysyx_25030077_arbiter.scala 70:20]
    node _io_axi_aw_valid_T = eq(state_reg, UInt<1>("h1")) @[ysyx_25030077_arbiter.scala 74:42]
    node _io_axi_aw_valid_T_1 = mux(_io_axi_aw_valid_T, io.axi_r_valid, UInt<1>("h0")) @[Mux.scala 101:16]
    io.axi_aw_valid <= _io_axi_aw_valid_T_1 @[ysyx_25030077_arbiter.scala 73:21]
    node _io_axi_ar_valid_T = eq(state_reg, UInt<1>("h0")) @[ysyx_25030077_arbiter.scala 77:42]
    node _io_axi_ar_valid_T_1 = eq(state_reg, UInt<1>("h1")) @[ysyx_25030077_arbiter.scala 78:42]
    node _io_axi_ar_valid_T_2 = mux(_io_axi_ar_valid_T_1, io.axi_r_valid, UInt<1>("h0")) @[Mux.scala 101:16]
    node _io_axi_ar_valid_T_3 = mux(_io_axi_ar_valid_T, io.ifu_valid, _io_axi_ar_valid_T_2) @[Mux.scala 101:16]
    io.axi_ar_valid <= _io_axi_ar_valid_T_3 @[ysyx_25030077_arbiter.scala 76:21]
    node _io_axi_ar_strb_T = eq(state_reg, UInt<1>("h0")) @[ysyx_25030077_arbiter.scala 81:42]
    node _io_axi_ar_strb_T_1 = eq(state_reg, UInt<1>("h1")) @[ysyx_25030077_arbiter.scala 82:42]
    node _io_axi_ar_strb_T_2 = mux(_io_axi_ar_strb_T_1, io.r_mask, UInt<1>("h0")) @[Mux.scala 101:16]
    node _io_axi_ar_strb_T_3 = mux(_io_axi_ar_strb_T, UInt<3>("h6"), _io_axi_ar_strb_T_2) @[Mux.scala 101:16]
    io.axi_ar_strb <= _io_axi_ar_strb_T_3 @[ysyx_25030077_arbiter.scala 80:21]
    node _io_axi_w_valid_T = eq(state_reg, UInt<1>("h1")) @[ysyx_25030077_arbiter.scala 85:42]
    node _io_axi_w_valid_T_1 = mux(_io_axi_w_valid_T, io.axi_r_valid, UInt<1>("h0")) @[Mux.scala 101:16]
    io.axi_w_valid <= _io_axi_w_valid_T_1 @[ysyx_25030077_arbiter.scala 84:21]
    node _io_axi_w_data_T = eq(state_reg, UInt<1>("h1")) @[ysyx_25030077_arbiter.scala 88:42]
    node _io_axi_w_data_T_1 = mux(_io_axi_w_data_T, io.rs2_data, UInt<1>("h0")) @[Mux.scala 101:16]
    io.axi_w_data <= _io_axi_w_data_T_1 @[ysyx_25030077_arbiter.scala 87:21]
    node _io_axi_w_strb_T = eq(state_reg, UInt<1>("h1")) @[ysyx_25030077_arbiter.scala 91:42]
    node _io_axi_w_strb_T_1 = mux(_io_axi_w_strb_T, io.w_mask, UInt<1>("h0")) @[Mux.scala 101:16]
    io.axi_w_strb <= _io_axi_w_strb_T_1 @[ysyx_25030077_arbiter.scala 90:21]
    io.axi_r_ready <= canAccept @[ysyx_25030077_arbiter.scala 94:21]
    io.axi_b_ready <= canAccept @[ysyx_25030077_arbiter.scala 95:21]
    io.ifu_ready <= canAccept @[ysyx_25030077_arbiter.scala 96:21]
    node _io_gpr_r_valid_T = eq(state_reg, UInt<2>("h2")) @[ysyx_25030077_arbiter.scala 99:42]
    node _io_gpr_r_valid_T_1 = mux(_io_gpr_r_valid_T, io.axi_r_valid, UInt<1>("h0")) @[Mux.scala 101:16]
    io.gpr_r_valid <= _io_gpr_r_valid_T_1 @[ysyx_25030077_arbiter.scala 98:21]
    node _io_gpr_b_valid_T = eq(state_reg, UInt<2>("h2")) @[ysyx_25030077_arbiter.scala 102:42]
    node _io_gpr_b_valid_T_1 = mux(_io_gpr_b_valid_T, io.axi_b_valid, UInt<1>("h0")) @[Mux.scala 101:16]
    io.gpr_b_valid <= _io_gpr_b_valid_T_1 @[ysyx_25030077_arbiter.scala 101:21]
    node _io_gpr_b_resp_T = eq(state_reg, UInt<2>("h2")) @[ysyx_25030077_arbiter.scala 105:42]
    node _io_gpr_b_resp_T_1 = mux(_io_gpr_b_resp_T, io.axi_b_resp, UInt<1>("h0")) @[Mux.scala 101:16]
    io.gpr_b_resp <= _io_gpr_b_resp_T_1 @[ysyx_25030077_arbiter.scala 104:21]
    node _io_gpr_data_T = eq(state_reg, UInt<2>("h2")) @[ysyx_25030077_arbiter.scala 108:42]
    node _io_gpr_data_T_1 = mux(_io_gpr_data_T, io.axi_r_data, UInt<1>("h0")) @[Mux.scala 101:16]
    io.gpr_data <= _io_gpr_data_T_1 @[ysyx_25030077_arbiter.scala 107:21]
    node _inst_reg_T = eq(io.axi_r_valid, UInt<1>("h1")) @[ysyx_25030077_arbiter.scala 111:47]
    node _inst_reg_T_1 = eq(state_reg, UInt<1>("h0")) @[ysyx_25030077_arbiter.scala 111:69]
    node _inst_reg_T_2 = and(_inst_reg_T, _inst_reg_T_1) @[ysyx_25030077_arbiter.scala 111:55]
    node _inst_reg_T_3 = mux(_inst_reg_T_2, io.axi_r_data, inst_reg) @[Mux.scala 101:16]
    inst_reg <= _inst_reg_T_3 @[ysyx_25030077_arbiter.scala 110:22]
    io.inst <= inst_reg @[ysyx_25030077_arbiter.scala 113:21]

