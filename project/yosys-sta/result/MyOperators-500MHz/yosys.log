
 /----------------------------------------------------------------------------\
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |  Copyright (C) 2012 - 2025  Claire Xenia Wolf <claire@yosyshq.com>         |
 |  Distributed under an ISC-like license, type "license" to see terms        |
 \----------------------------------------------------------------------------/
 Yosys 0.53+60 (git sha1 209df95fb, clang++ 18.1.8 -fPIC -O3)

-- Executing script file `-' --
[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.

1. Executing Verilog-2005 frontend: /home/meowth/ysyx/ysyx-workbench/project/yosys-sta/example/gcd.v
Parsing SystemVerilog input from `/home/meowth/ysyx/ysyx-workbench/project/yosys-sta/example/gcd.v' to AST representation.
Generating RTLIL representation for module `\gcd'.
Generating RTLIL representation for module `\GcdUnitCtrlRTL_0x4d0fc71ead8d3d9e'.
Generating RTLIL representation for module `\RegRst_0x9f365fdf6c8998a'.
Generating RTLIL representation for module `\GcdUnitDpathRTL_0x4d0fc71ead8d3d9e'.
Generating RTLIL representation for module `\RegEn_0x68db79c4ec1d6e5b'.
Generating RTLIL representation for module `\LtComparator_0x422b1f52edd46a85'.
Generating RTLIL representation for module `\ZeroComparator_0x422b1f52edd46a85'.
Generating RTLIL representation for module `\Mux_0x683fa1a418b072c9'.
Generating RTLIL representation for module `\Mux_0xdd6473406d1a99a'.
Generating RTLIL representation for module `\Subtractor_0x422b1f52edd46a85'.
Successfully finished Verilog frontend.

2. Executing Verilog-2005 frontend: /home/meowth/ysyx/ysyx-workbench/project/yosys-sta/example/MyOperators.v
Parsing SystemVerilog input from `/home/meowth/ysyx/ysyx-workbench/project/yosys-sta/example/MyOperators.v' to AST representation.
Generating RTLIL representation for module `\MyOperators'.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: /home/meowth/ysyx/ysyx-workbench/project/yosys-sta/scripts/../pdk/nangate45/verilog/blackbox.v
Parsing Verilog input from `/home/meowth/ysyx/ysyx-workbench/project/yosys-sta/scripts/../pdk/nangate45/verilog/blackbox.v' to AST representation.
Successfully finished Verilog frontend.

4. Executing Verilog-2005 frontend: /home/meowth/ysyx/ysyx-workbench/project/yosys-sta/scripts/../pdk/nangate45/verilog/cells_clkgate.v
Parsing Verilog input from `/home/meowth/ysyx/ysyx-workbench/project/yosys-sta/scripts/../pdk/nangate45/verilog/cells_clkgate.v' to AST representation.
Generating RTLIL representation for module `\OPENROAD_CLKGATE'.
Successfully finished Verilog frontend.

5. Executing SYNTH pass.

5.1. Executing HIERARCHY pass (managing design hierarchy).

5.1.1. Analyzing design hierarchy..
Top module:  \MyOperators

5.1.2. Analyzing design hierarchy..
Top module:  \MyOperators
Removing unused module `\OPENROAD_CLKGATE'.
Removing unused module `\Subtractor_0x422b1f52edd46a85'.
Removing unused module `\Mux_0xdd6473406d1a99a'.
Removing unused module `\Mux_0x683fa1a418b072c9'.
Removing unused module `\ZeroComparator_0x422b1f52edd46a85'.
Removing unused module `\LtComparator_0x422b1f52edd46a85'.
Removing unused module `\RegEn_0x68db79c4ec1d6e5b'.
Removing unused module `\GcdUnitDpathRTL_0x4d0fc71ead8d3d9e'.
Removing unused module `\RegRst_0x9f365fdf6c8998a'.
Removing unused module `\GcdUnitCtrlRTL_0x4d0fc71ead8d3d9e'.
Removing unused module `\gcd'.
Removed 11 unused modules.

5.2. Executing PROC pass (convert processes to netlists).

5.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

5.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

5.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

5.2.4. Executing PROC_INIT pass (extract init attributes).

5.2.5. Executing PROC_ARST pass (detect async resets in processes).

5.2.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

5.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).

5.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).

5.2.9. Executing PROC_DFF pass (convert process syncs to FFs).

5.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

5.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

5.2.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module MyOperators.

5.3. Executing FLATTEN pass (flatten design).

5.4. Executing OPT_EXPR pass (perform const folding).
Optimizing module MyOperators.

5.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MyOperators..
Removed 0 unused cells and 34 unused wires.
<suppressed ~1 debug messages>

5.6. Executing CHECK pass (checking for obvious problems).
Checking module MyOperators...
Found and reported 0 problems.

5.7. Executing OPT pass (performing simple optimizations).

5.7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module MyOperators.

5.7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MyOperators'.
Removed a total of 0 cells.

5.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \MyOperators..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~8 debug messages>

5.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \MyOperators.
Performed a total of 0 changes.

5.7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MyOperators'.
Removed a total of 0 cells.

5.7.6. Executing OPT_DFF pass (perform DFF optimizations).

5.7.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MyOperators..

5.7.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module MyOperators.

5.7.9. Finished OPT passes. (There is nothing left to do.)

5.8. Executing FSM pass (extract and optimize FSM).

5.8.1. Executing FSM_DETECT pass (finding FSMs in design).

5.8.2. Executing FSM_EXTRACT pass (extracting FSM from design).

5.8.3. Executing FSM_OPT pass (simple optimizations of FSMs).

5.8.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MyOperators..

5.8.5. Executing FSM_OPT pass (simple optimizations of FSMs).

5.8.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

5.8.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

5.8.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

5.9. Executing OPT pass (performing simple optimizations).

5.9.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module MyOperators.

5.9.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MyOperators'.
Removed a total of 0 cells.

5.9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \MyOperators..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~8 debug messages>

5.9.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \MyOperators.
Performed a total of 0 changes.

5.9.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MyOperators'.
Removed a total of 0 cells.

5.9.6. Executing OPT_DFF pass (perform DFF optimizations).

5.9.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MyOperators..

5.9.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module MyOperators.

5.9.9. Finished OPT passes. (There is nothing left to do.)

5.10. Executing WREDUCE pass (reducing word size of cells).
Removed top 15 bits (of 16) from port A of cell MyOperators.$shl$/home/meowth/ysyx/ysyx-workbench/project/yosys-sta/example/MyOperators.v:11$36 ($shl).
Removed top 5 bits (of 16) from port Y of cell MyOperators.$shl$/home/meowth/ysyx/ysyx-workbench/project/yosys-sta/example/MyOperators.v:11$36 ($shl).
Removed top 31 bits (of 63) from port A of cell MyOperators.$shl$/home/meowth/ysyx/ysyx-workbench/project/yosys-sta/example/MyOperators.v:22$46 ($shl).
Removed top 32 bits (of 33) from port B of cell MyOperators.$or$/home/meowth/ysyx/ysyx-workbench/project/yosys-sta/example/MyOperators.v:35$58 ($or).
Removed top 1 bits (of 33) from port B of cell MyOperators.$or$/home/meowth/ysyx/ysyx-workbench/project/yosys-sta/example/MyOperators.v:37$59 ($or).
Removed top 1 bits (of 33) from port B of cell MyOperators.$or$/home/meowth/ysyx/ysyx-workbench/project/yosys-sta/example/MyOperators.v:39$60 ($or).
Removed top 1 bits (of 33) from port B of cell MyOperators.$or$/home/meowth/ysyx/ysyx-workbench/project/yosys-sta/example/MyOperators.v:41$61 ($or).
Removed top 1 bits (of 33) from port B of cell MyOperators.$or$/home/meowth/ysyx/ysyx-workbench/project/yosys-sta/example/MyOperators.v:43$62 ($or).
Removed top 30 bits (of 63) from port A of cell MyOperators.$or$/home/meowth/ysyx/ysyx-workbench/project/yosys-sta/example/MyOperators.v:45$63 ($or).
Removed top 31 bits (of 63) from port B of cell MyOperators.$or$/home/meowth/ysyx/ysyx-workbench/project/yosys-sta/example/MyOperators.v:47$64 ($or).
Removed top 62 bits (of 63) from port B of cell MyOperators.$or$/home/meowth/ysyx/ysyx-workbench/project/yosys-sta/example/MyOperators.v:49$65 ($or).
Removed top 31 bits (of 63) from port Y of cell MyOperators.$or$/home/meowth/ysyx/ysyx-workbench/project/yosys-sta/example/MyOperators.v:49$65 ($or).
Removed top 31 bits (of 63) from port A of cell MyOperators.$or$/home/meowth/ysyx/ysyx-workbench/project/yosys-sta/example/MyOperators.v:49$65 ($or).
Removed top 31 bits (of 63) from port Y of cell MyOperators.$or$/home/meowth/ysyx/ysyx-workbench/project/yosys-sta/example/MyOperators.v:47$64 ($or).
Removed top 31 bits (of 63) from port A of cell MyOperators.$or$/home/meowth/ysyx/ysyx-workbench/project/yosys-sta/example/MyOperators.v:47$64 ($or).
Removed top 31 bits (of 63) from port Y of cell MyOperators.$or$/home/meowth/ysyx/ysyx-workbench/project/yosys-sta/example/MyOperators.v:45$63 ($or).
Removed top 1 bits (of 33) from port A of cell MyOperators.$or$/home/meowth/ysyx/ysyx-workbench/project/yosys-sta/example/MyOperators.v:45$63 ($or).
Removed top 31 bits (of 63) from port B of cell MyOperators.$or$/home/meowth/ysyx/ysyx-workbench/project/yosys-sta/example/MyOperators.v:45$63 ($or).
Removed top 31 bits (of 63) from mux cell MyOperators.$ternary$/home/meowth/ysyx/ysyx-workbench/project/yosys-sta/example/MyOperators.v:30$54 ($mux).
Removed top 1 bits (of 33) from port Y of cell MyOperators.$or$/home/meowth/ysyx/ysyx-workbench/project/yosys-sta/example/MyOperators.v:43$62 ($or).
Removed top 1 bits (of 33) from port A of cell MyOperators.$or$/home/meowth/ysyx/ysyx-workbench/project/yosys-sta/example/MyOperators.v:43$62 ($or).
Removed top 31 bits (of 63) from port Y of cell MyOperators.$shl$/home/meowth/ysyx/ysyx-workbench/project/yosys-sta/example/MyOperators.v:22$46 ($shl).
Removed top 1 bits (of 33) from port Y of cell MyOperators.$or$/home/meowth/ysyx/ysyx-workbench/project/yosys-sta/example/MyOperators.v:41$61 ($or).
Removed top 1 bits (of 33) from port A of cell MyOperators.$or$/home/meowth/ysyx/ysyx-workbench/project/yosys-sta/example/MyOperators.v:41$61 ($or).
Removed top 1 bits (of 33) from port Y of cell MyOperators.$or$/home/meowth/ysyx/ysyx-workbench/project/yosys-sta/example/MyOperators.v:39$60 ($or).
Removed top 1 bits (of 33) from port A of cell MyOperators.$or$/home/meowth/ysyx/ysyx-workbench/project/yosys-sta/example/MyOperators.v:39$60 ($or).
Removed top 1 bits (of 33) from port Y of cell MyOperators.$or$/home/meowth/ysyx/ysyx-workbench/project/yosys-sta/example/MyOperators.v:37$59 ($or).
Removed top 1 bits (of 33) from port A of cell MyOperators.$or$/home/meowth/ysyx/ysyx-workbench/project/yosys-sta/example/MyOperators.v:37$59 ($or).
Removed top 1 bits (of 33) from port Y of cell MyOperators.$or$/home/meowth/ysyx/ysyx-workbench/project/yosys-sta/example/MyOperators.v:35$58 ($or).
Removed top 1 bits (of 33) from port A of cell MyOperators.$or$/home/meowth/ysyx/ysyx-workbench/project/yosys-sta/example/MyOperators.v:35$58 ($or).
Removed top 1 bits (of 33) from port Y of cell MyOperators.$or$/home/meowth/ysyx/ysyx-workbench/project/yosys-sta/example/MyOperators.v:33$57 ($or).
Removed top 1 bits (of 33) from port A of cell MyOperators.$or$/home/meowth/ysyx/ysyx-workbench/project/yosys-sta/example/MyOperators.v:33$57 ($or).
Removed top 1 bits (of 33) from port B of cell MyOperators.$or$/home/meowth/ysyx/ysyx-workbench/project/yosys-sta/example/MyOperators.v:33$57 ($or).
Removed top 1 bits (of 33) from mux cell MyOperators.$ternary$/home/meowth/ysyx/ysyx-workbench/project/yosys-sta/example/MyOperators.v:23$47 ($mux).
Removed top 1 bits (of 33) from mux cell MyOperators.$ternary$/home/meowth/ysyx/ysyx-workbench/project/yosys-sta/example/MyOperators.v:24$48 ($mux).
Removed top 31 bits (of 63) from wire MyOperators._GEN_5.
Removed top 1 bits (of 33) from wire MyOperators._io_out_T_16.
Removed top 1 bits (of 33) from wire MyOperators._io_out_T_17.
Removed top 31 bits (of 63) from wire MyOperators._io_out_T_24.
Removed top 1 bits (of 33) from wire MyOperators._io_out_T_32.
Removed top 5 bits (of 16) from wire MyOperators.oneHot.
Removed top 31 bits (of 63) from wire MyOperators.sllResult.

5.11. Executing PEEPOPT pass (run peephole optimizers).

5.12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MyOperators..
Removed 0 unused cells and 7 unused wires.
<suppressed ~1 debug messages>

5.13. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module MyOperators:
  creating $macc model for $add$/home/meowth/ysyx/ysyx-workbench/project/yosys-sta/example/MyOperators.v:12$37 ($add).
  creating $macc model for $sub$/home/meowth/ysyx/ysyx-workbench/project/yosys-sta/example/MyOperators.v:13$38 ($sub).
  creating $alu model for $macc $sub$/home/meowth/ysyx/ysyx-workbench/project/yosys-sta/example/MyOperators.v:13$38.
  creating $alu model for $macc $add$/home/meowth/ysyx/ysyx-workbench/project/yosys-sta/example/MyOperators.v:12$37.
  creating $alu model for $lt$/home/meowth/ysyx/ysyx-workbench/project/yosys-sta/example/MyOperators.v:14$39 ($lt): merged with $sub$/home/meowth/ysyx/ysyx-workbench/project/yosys-sta/example/MyOperators.v:13$38.
  creating $alu model for $lt$/home/meowth/ysyx/ysyx-workbench/project/yosys-sta/example/MyOperators.v:15$40 ($lt): new $alu
  creating $alu cell for $add$/home/meowth/ysyx/ysyx-workbench/project/yosys-sta/example/MyOperators.v:12$37: $auto$alumacc.cc:495:replace_alu$86
  creating $alu cell for $lt$/home/meowth/ysyx/ysyx-workbench/project/yosys-sta/example/MyOperators.v:15$40: $auto$alumacc.cc:495:replace_alu$89
  creating $alu cell for $sub$/home/meowth/ysyx/ysyx-workbench/project/yosys-sta/example/MyOperators.v:13$38, $lt$/home/meowth/ysyx/ysyx-workbench/project/yosys-sta/example/MyOperators.v:14$39: $auto$alumacc.cc:495:replace_alu$96
  created 3 $alu and 0 $macc cells.

5.14. Executing SHARE pass (SAT-based resource sharing).
Found 3 cells in module MyOperators that may be considered for resource sharing.
  Analyzing resource sharing options for $sshr$/home/meowth/ysyx/ysyx-workbench/project/yosys-sta/example/MyOperators.v:19$44 ($sshr):
    Found 1 activation_patterns using ctrl signal \oneHot [5].
    No candidates found.
  Analyzing resource sharing options for $shr$/home/meowth/ysyx/ysyx-workbench/project/yosys-sta/example/MyOperators.v:20$45 ($shr):
    Found 1 activation_patterns using ctrl signal \oneHot [9].
    No candidates found.
  Analyzing resource sharing options for $shl$/home/meowth/ysyx/ysyx-workbench/project/yosys-sta/example/MyOperators.v:22$46 ($shl):
    Found 1 activation_patterns using ctrl signal \oneHot [8].
    No candidates found.

5.15. Executing OPT pass (performing simple optimizations).

5.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module MyOperators.

5.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MyOperators'.
Removed a total of 0 cells.

5.15.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \MyOperators..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~8 debug messages>

5.15.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \MyOperators.
Performed a total of 0 changes.

5.15.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MyOperators'.
Removed a total of 0 cells.

5.15.6. Executing OPT_DFF pass (perform DFF optimizations).

5.15.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MyOperators..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

5.15.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module MyOperators.

5.15.9. Rerunning OPT passes. (Maybe there is more to do..)

5.15.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \MyOperators..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~8 debug messages>

5.15.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \MyOperators.
Performed a total of 0 changes.

5.15.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MyOperators'.
Removed a total of 0 cells.

5.15.13. Executing OPT_DFF pass (perform DFF optimizations).

5.15.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MyOperators..

5.15.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module MyOperators.

5.15.16. Finished OPT passes. (There is nothing left to do.)

5.16. Executing MEMORY pass.

5.16.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

5.16.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

5.16.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

5.16.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

5.16.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

5.16.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MyOperators..

5.16.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

5.16.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

5.16.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MyOperators..

5.16.10. Executing MEMORY_COLLECT pass (generating $mem cells).

5.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MyOperators..

5.18. Executing OPT pass (performing simple optimizations).

5.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module MyOperators.
<suppressed ~51 debug messages>

5.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MyOperators'.
Removed a total of 0 cells.

5.18.3. Executing OPT_DFF pass (perform DFF optimizations).

5.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MyOperators..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

5.18.5. Finished fast OPT passes.

5.19. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

5.20. Executing OPT pass (performing simple optimizations).

5.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module MyOperators.

5.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MyOperators'.
Removed a total of 0 cells.

5.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \MyOperators..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~8 debug messages>

5.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \MyOperators.
Performed a total of 0 changes.

5.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MyOperators'.
Removed a total of 0 cells.

5.20.6. Executing OPT_SHARE pass.

5.20.7. Executing OPT_DFF pass (perform DFF optimizations).

5.20.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MyOperators..

5.20.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module MyOperators.

5.20.10. Finished OPT passes. (There is nothing left to do.)

5.21. Executing TECHMAP pass (map to technology primitives).

5.21.1. Executing Verilog-2005 frontend: /home/meowth/ysyx/ysyx-workbench/project/oss-cad-suite-linux-x64-20250524/oss-cad-suite/lib/../share/yosys/techmap.v
Parsing Verilog input from `/home/meowth/ysyx/ysyx-workbench/project/oss-cad-suite-linux-x64-20250524/oss-cad-suite/lib/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu_brent_kung'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

5.21.2. Continuing TECHMAP pass.
Using template $paramod$constmap:3b7d6ac8828548b3a894399cf34931ecb937456e$paramod$b67644af347f71637e7831b7874e7e4f3fbf69ab\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using template $paramod$2653f68ddb8eab7b1907b4a20767b72a824a7a36\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $or.
Using template $paramod$857150d3a9b7fb38b73bbaa31ff652415e553f98\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $xor.
Using template $paramod$constmap:b9a86d073741c2a0f7bb241e73c2dd11747f3288$paramod$adfa61f2ba6b44ed6866b8ecd7b91c39c0061bd9\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshr.
Using template $paramod$constmap:b9a86d073741c2a0f7bb241e73c2dd11747f3288$paramod$56955d0f36f77738c952d3505dc563df3ee11b94\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using template $paramod$constmap:4621fcf06a436d1e2a4080e2ed9866a7d07a6e07$paramod$335cfd09f1afa8139c4aafcbbe5f361887b79c5e\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $ne.
Using template $paramod\_90_lcu_brent_kung\WIDTH=32'00000000000000000000000000100000 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu_brent_kung\WIDTH=32'00000000000000000000000000100001 for cells of type $lcu.
No more expansions possible.
<suppressed ~2441 debug messages>

5.22. Executing OPT pass (performing simple optimizations).

5.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module MyOperators.
<suppressed ~120 debug messages>

5.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MyOperators'.
<suppressed ~1083 debug messages>
Removed a total of 361 cells.

5.22.3. Executing OPT_DFF pass (perform DFF optimizations).

5.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MyOperators..
Removed 34 unused cells and 225 unused wires.
<suppressed ~35 debug messages>

5.22.5. Finished fast OPT passes.

5.23. Executing ABC pass (technology mapping using ABC).

5.23.1. Extracting gate netlist of module `\MyOperators' to `<abc-temp-dir>/input.blif'..
Extracted 1682 gates and 1751 wires to a netlist network with 68 inputs and 34 outputs.

5.23.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

5.23.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       36
ABC RESULTS:            ANDNOT cells:      434
ABC RESULTS:               MUX cells:      475
ABC RESULTS:              NAND cells:       33
ABC RESULTS:               NOR cells:       66
ABC RESULTS:               NOT cells:       74
ABC RESULTS:                OR cells:      477
ABC RESULTS:             ORNOT cells:       25
ABC RESULTS:              XNOR cells:       37
ABC RESULTS:               XOR cells:       62
ABC RESULTS:        internal signals:     1649
ABC RESULTS:           input signals:       68
ABC RESULTS:          output signals:       34
Removing temp directory.

5.24. Executing OPT pass (performing simple optimizations).

5.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module MyOperators.
<suppressed ~246 debug messages>

5.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MyOperators'.
Removed a total of 0 cells.

5.24.3. Executing OPT_DFF pass (perform DFF optimizations).

5.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MyOperators..
Removed 4 unused cells and 383 unused wires.
<suppressed ~22 debug messages>

5.24.5. Finished fast OPT passes.

5.25. Executing HIERARCHY pass (managing design hierarchy).
Attribute `top' found on module `MyOperators'. Setting top module to MyOperators.

5.25.1. Analyzing design hierarchy..
Top module:  \MyOperators

5.25.2. Analyzing design hierarchy..
Top module:  \MyOperators
Removed 0 unused modules.

5.26. Printing statistics.

=== MyOperators ===

   Number of wires:               1713
   Number of wire bits:           2687
   Number of public wires:          32
   Number of public wire bits:    1006
   Number of ports:                  8
   Number of port bits:            104
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1715
     $_ANDNOT_                     434
     $_AND_                         36
     $_MUX_                        475
     $_NAND_                        33
     $_NOR_                         66
     $_NOT_                         70
     $_ORNOT_                       25
     $_OR_                         477
     $_XNOR_                        37
     $_XOR_                         62

5.27. Executing CHECK pass (checking for obvious problems).
Checking module MyOperators...
Found and reported 0 problems.

6. Executing AUTONAME pass.
Renamed 13770 objects in module MyOperators (44 iterations).
<suppressed ~3396 debug messages>

7. Executing SPLITNETS pass (splitting up multi-bit signals).

8. Executing OPT pass (performing simple optimizations).

8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module MyOperators.

8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MyOperators'.
Removed a total of 0 cells.

8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \MyOperators..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \MyOperators.
Performed a total of 0 changes.

8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MyOperators'.
Removed a total of 0 cells.

8.6. Executing OPT_DFF pass (perform DFF optimizations).

8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MyOperators..
Removed 0 unused cells and 902 unused wires.
<suppressed ~902 debug messages>

8.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module MyOperators.

8.9. Rerunning OPT passes. (Maybe there is more to do..)

8.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \MyOperators..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

8.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \MyOperators.
Performed a total of 0 changes.

8.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MyOperators'.
Removed a total of 0 cells.

8.13. Executing OPT_DFF pass (perform DFF optimizations).

8.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MyOperators..

8.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module MyOperators.

8.16. Finished OPT passes. (There is nothing left to do.)

9. Executing CLOCK_GATE pass (extract clock gating out of flip flops).
Selected rising edge ICG \CLKGATE_X1 from Liberty file
Converted 0 FFs.
<suppressed ~24 debug messages>

10. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell DFF_X1 (noninv, pins=4, area=4.52) is a direct match for cell type $_DFF_P_.
  cell DFFR_X1 (noninv, pins=5, area=5.32) is a direct match for cell type $_DFF_PN0_.
  cell DFFS_X1 (noninv, pins=5, area=5.32) is a direct match for cell type $_DFF_PN1_.
  cell DFFRS_X1 (noninv, pins=6, area=6.38) is a direct match for cell type $_DFFSR_PNN_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \DFF_X1 _DFF_P_ (.CK( C), .D( D), .Q( Q), .QN(~Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \DFFR_X1 _DFF_PN0_ (.CK( C), .D( D), .Q( Q), .QN(~Q), .RN( R));
    \DFFS_X1 _DFF_PN1_ (.CK( C), .D( D), .Q( Q), .QN(~Q), .SN( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    unmapped dff cell: $_DFFE_NN_
    unmapped dff cell: $_DFFE_NP_
    unmapped dff cell: $_DFFE_PN_
    unmapped dff cell: $_DFFE_PP_
    unmapped dff cell: $_DFFSR_NNN_
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    \DFFRS_X1 _DFFSR_PNN_ (.CK( C), .D( D), .Q( Q), .QN(~Q), .RN( R), .SN( S));
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

10.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
<suppressed ~8 debug messages>
Mapping DFF cells in module `\MyOperators':

11. Executing OPT pass (performing simple optimizations).

11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module MyOperators.

11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MyOperators'.
Removed a total of 0 cells.

11.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \MyOperators..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

11.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \MyOperators.
Performed a total of 0 changes.

11.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MyOperators'.
Removed a total of 0 cells.

11.6. Executing OPT_DFF pass (perform DFF optimizations).

11.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MyOperators..

11.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module MyOperators.

11.9. Finished OPT passes. (There is nothing left to do.)

12. Executing ABC pass (technology mapping using ABC).

12.1. Extracting gate netlist of module `\MyOperators' to `/tmp/yosys-abc-THgoJ1/input.blif'..
Extracted 1715 gates and 1783 wires to a netlist network with 68 inputs and 34 outputs.

12.1.1. Executing ABC.
Running ABC command: "/home/meowth/ysyx/ysyx-workbench/project/oss-cad-suite-linux-x64-20250524/oss-cad-suite/lib/yosys-abc" -s -f /tmp/yosys-abc-THgoJ1/abc.script 2>&1
ABC: ABC command line: "source /tmp/yosys-abc-THgoJ1/abc.script".
ABC: 
ABC: + read_blif /tmp/yosys-abc-THgoJ1/input.blif 
ABC: + read_lib -w /home/meowth/ysyx/ysyx-workbench/project/yosys-sta/scripts/../pdk/nangate45/lib/Nangate45_typ.lib 
ABC: Parsing finished successfully.  Parsing time =     0.05 sec
ABC: Scl_LibertyReadGenlib() skipped cell "ANTENNA_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X1" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X8" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X1" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X8" without logic function.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFRS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFRS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFR_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFR_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLH_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLH_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLL_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLL_X2".
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X2" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X4" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X8" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X16" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X32" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "LOGIC0_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "LOGIC1_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFRS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFRS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFR_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFR_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFF_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFF_X2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X8".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X16".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TINV_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "TLAT_X1".
ABC: Library "NangateOpenCellLibrary" from "/home/meowth/ysyx/ysyx-workbench/project/yosys-sta/scripts/../pdk/nangate45/lib/Nangate45_typ.lib" has 90 cells (35 skipped: 21 seq; 6 tri-state; 8 no func; 9 dont_use).  Time =     0.07 sec
ABC: Memory =   11.38 MB. Time =     0.07 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FA_X1").
ABC: + strash 
ABC: + ifraig 
ABC: + retime -D 2000.0 -M 6 
ABC: + strash 
ABC: + dch -f 
ABC: + map -p -M 1 -D 2000.0 -f 
ABC: + topo 
ABC: + dnsize 
ABC: + buffer -p 
ABC: + upsize 
ABC: + 
ABC: + write_blif /tmp/yosys-abc-THgoJ1/output.blif 

12.1.2. Re-integrating ABC results.
ABC RESULTS:           AND2_X1 cells:      110
ABC RESULTS:           AND2_X2 cells:        8
ABC RESULTS:           AND2_X4 cells:        7
ABC RESULTS:           AND3_X1 cells:       86
ABC RESULTS:           AND3_X2 cells:        1
ABC RESULTS:           AND3_X4 cells:        1
ABC RESULTS:           AND4_X1 cells:       15
ABC RESULTS:           AND4_X2 cells:        1
ABC RESULTS:           AND4_X4 cells:        2
ABC RESULTS:         AOI211_X1 cells:       22
ABC RESULTS:         AOI211_X2 cells:        1
ABC RESULTS:          AOI21_X1 cells:      224
ABC RESULTS:          AOI21_X2 cells:        9
ABC RESULTS:          AOI21_X4 cells:        3
ABC RESULTS:         AOI221_X1 cells:        1
ABC RESULTS:         AOI221_X2 cells:        1
ABC RESULTS:         AOI221_X4 cells:        3
ABC RESULTS:          AOI22_X1 cells:       14
ABC RESULTS:           BUF_X16 cells:        2
ABC RESULTS:            BUF_X2 cells:       25
ABC RESULTS:            BUF_X4 cells:       58
ABC RESULTS:            BUF_X8 cells:        3
ABC RESULTS:            INV_X1 cells:      152
ABC RESULTS:            INV_X2 cells:        4
ABC RESULTS:            INV_X4 cells:        2
ABC RESULTS:           MUX2_X1 cells:       96
ABC RESULTS:           MUX2_X2 cells:        4
ABC RESULTS:          NAND2_X1 cells:      136
ABC RESULTS:          NAND2_X2 cells:        3
ABC RESULTS:          NAND2_X4 cells:        2
ABC RESULTS:          NAND3_X1 cells:      154
ABC RESULTS:          NAND3_X2 cells:        6
ABC RESULTS:          NAND3_X4 cells:        1
ABC RESULTS:          NAND4_X1 cells:       37
ABC RESULTS:          NAND4_X4 cells:        2
ABC RESULTS:           NOR2_X1 cells:      133
ABC RESULTS:           NOR2_X2 cells:        5
ABC RESULTS:           NOR2_X4 cells:       11
ABC RESULTS:           NOR3_X1 cells:       40
ABC RESULTS:           NOR3_X4 cells:        2
ABC RESULTS:           NOR4_X1 cells:       12
ABC RESULTS:           NOR4_X2 cells:        1
ABC RESULTS:           NOR4_X4 cells:        2
ABC RESULTS:         OAI211_X1 cells:      106
ABC RESULTS:         OAI211_X2 cells:        6
ABC RESULTS:          OAI21_X1 cells:      203
ABC RESULTS:          OAI21_X2 cells:        2
ABC RESULTS:         OAI221_X1 cells:        9
ABC RESULTS:          OAI22_X1 cells:        2
ABC RESULTS:            OR2_X1 cells:       22
ABC RESULTS:            OR2_X2 cells:        1
ABC RESULTS:            OR2_X4 cells:        4
ABC RESULTS:            OR3_X1 cells:       44
ABC RESULTS:            OR3_X2 cells:        1
ABC RESULTS:            OR3_X4 cells:        6
ABC RESULTS:            OR4_X1 cells:        7
ABC RESULTS:            OR4_X2 cells:        3
ABC RESULTS:            OR4_X4 cells:        1
ABC RESULTS:          XNOR2_X1 cells:        7
ABC RESULTS:           XOR2_X1 cells:       16
ABC RESULTS:           XOR2_X2 cells:        3
ABC RESULTS:        internal signals:     1681
ABC RESULTS:           input signals:       68
ABC RESULTS:          output signals:       34
Removing temp directory.

13. Executing HILOMAP pass (mapping to constant drivers).

14. Executing SETUNDEF pass (replace undef values with defined constants).

15. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MyOperators..
Removed 0 unused cells and 1783 unused wires.
<suppressed ~1682 debug messages>

16. Executing Liberty frontend: /home/meowth/ysyx/ysyx-workbench/project/yosys-sta/scripts/../pdk/nangate45/lib/Nangate45_typ.lib
Imported 134 cell types from liberty file.

17. Executing CHECK pass (checking for obvious problems).
Checking module MyOperators...
Found and reported 0 problems.

18. Printing statistics.

=== MyOperators ===

   Number of wires:               1915
   Number of wire bits:           1915
   Number of public wires:         104
   Number of public wire bits:     104
   Number of ports:                104
   Number of port bits:            104
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1845
     AND2_X1                       110
     AND2_X2                         8
     AND2_X4                         7
     AND3_X1                        86
     AND3_X2                         1
     AND3_X4                         1
     AND4_X1                        15
     AND4_X2                         1
     AND4_X4                         2
     AOI211_X1                      22
     AOI211_X2                       1
     AOI21_X1                      224
     AOI21_X2                        9
     AOI21_X4                        3
     AOI221_X1                       1
     AOI221_X2                       1
     AOI221_X4                       3
     AOI22_X1                       14
     BUF_X16                         2
     BUF_X2                         25
     BUF_X4                         58
     BUF_X8                          3
     INV_X1                        152
     INV_X2                          4
     INV_X4                          2
     MUX2_X1                        96
     MUX2_X2                         4
     NAND2_X1                      136
     NAND2_X2                        3
     NAND2_X4                        2
     NAND3_X1                      154
     NAND3_X2                        6
     NAND3_X4                        1
     NAND4_X1                       37
     NAND4_X4                        2
     NOR2_X1                       133
     NOR2_X2                         5
     NOR2_X4                        11
     NOR3_X1                        40
     NOR3_X4                         2
     NOR4_X1                        12
     NOR4_X2                         1
     NOR4_X4                         2
     OAI211_X1                     106
     OAI211_X2                       6
     OAI21_X1                      203
     OAI21_X2                        2
     OAI221_X1                       9
     OAI22_X1                        2
     OR2_X1                         22
     OR2_X2                          1
     OR2_X4                          4
     OR3_X1                         44
     OR3_X2                          1
     OR3_X4                          6
     OR4_X1                          7
     OR4_X2                          3
     OR4_X4                          1
     XNOR2_X1                        7
     XOR2_X1                        16
     XOR2_X2                         3

   Chip area for module '\MyOperators': 2199.820000
     of which used for sequential elements: 0.000000 (0.00%)

19. Executing Verilog backend.
Dumping module `\MyOperators'.

End of script. Logfile hash: 738470631d, CPU: user 1.01s system 0.05s, MEM: 40.24 MB peak
Yosys 0.53+60 (git sha1 209df95fb, clang++ 18.1.8 -fPIC -O3)
Time spent: 44% 2x abc (0 sec), 11% 31x opt_expr (0 sec), ...
